async function g(c,n="program.c"){var u,f,k,p,y;if(typeof window<"u"&&window.__mockCompileCWithWasmer)return await window.__mockCompileCWithWasmer(c,n);async function r(a){try{return await new Function("m","return import(m)")(a)}catch{return null}}let e=null;if(e=await r("@wasmer/sdk"),!e&&typeof window<"u"){const a=window.__WASMER_SDK_URL;a&&(e=await r(a)),e||(e=await r("https://esm.sh/@wasmer/sdk@1.1.1")||await r("https://cdn.skypack.dev/@wasmer/sdk")||await r("https://esm.run/@wasmer/sdk@1.1.1"))}if(!e)throw new Error("Wasmer SDK not available. Check network access; falling back failed.");const t=e&&(e.Wasmer||((u=e.default)==null?void 0:u.Wasmer)||e.default||e);if(!t)throw new Error("Wasmer SDK loaded but no usable API was found");typeof t.init=="function"&&await t.init();const w=t.createFs||t.createFS||((f=t.FS)==null?void 0:f.create)||((k=t.fs)==null?void 0:k.create);if(typeof w!="function"){const a=Object.keys(t).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing createFs(); available keys: [${a}] â€” try setting window.__WASMER_SDK_URL to a compatible SDK (e.g., 'https://esm.sh/@wasmer/sdk@1.1.1') and re-run /cc.`)}const s=await w.call(t);await s.writeFile(`/work/${n}`,new TextEncoder().encode(c));const h="wasmer/clang:latest",d=n.replace(/\.c$/i,".wasm"),W=["--target=wasm32-wasi","-O3","-Wl,--export-all","-Wl,--no-entry","-o",`/work/${d}`,`/work/${n}`];if(typeof t.runPackage!="function")throw new Error("Wasmer SDK missing runPackage()");const l=await t.runPackage(h,{args:W,mount:{"/work":s},env:{}});let m="",o="";try{m=new TextDecoder().decode(await((p=l.stdout)==null?void 0:p.bytes()))}catch{}try{o=new TextDecoder().decode(await((y=l.stderr)==null?void 0:y.bytes()))}catch{}const i=await s.readFile(`/work/${d}`);if(!i||!(i instanceof Uint8Array))throw new Error(`Wasmer compile failed: output file missing. Stderr: ${o}`);return{wasm:i,stdout:m,stderr:o}}export{g as compileCWithWasmer};
