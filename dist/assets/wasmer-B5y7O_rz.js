async function p(l,e="program.c"){var i,d;const m="@wasmer/sdk";let s;try{s=await new Function("m","return import(m)")(m)}catch{throw new Error("Wasmer SDK not available. Please ensure @wasmer/sdk is installed and network access is allowed to fetch packages.")}const{Wasmer:t}=s;await t.init();const a=await t.createFs();await a.writeFile(`/work/${e}`,new TextEncoder().encode(l));const u="wasmer/clang:16",n=e.replace(/\.c$/i,".wasm"),k=["--target=wasm32-wasi","-O3","-Wl,--export-all","-Wl,--no-entry","-o",`/work/${n}`,`/work/${e}`],c=await t.runPackage(u,{args:k,mount:{"/work":a},env:{}});let w="",r="";try{w=new TextDecoder().decode(await((i=c.stdout)==null?void 0:i.bytes()))}catch{}try{r=new TextDecoder().decode(await((d=c.stderr)==null?void 0:d.bytes()))}catch{}const o=await a.readFile(`/work/${n}`);if(!o||!(o instanceof Uint8Array))throw new Error(`Wasmer compile failed: output file missing. Stderr: ${r}`);return{wasm:o,stdout:w,stderr:r}}export{p as compileCWithWasmer};
