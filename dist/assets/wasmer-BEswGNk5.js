async function D(m,c="program.c",t){var y,W,o,h,S,_;if(typeof window<"u"&&window.__mockCompileCWithWasmer)return await window.__mockCompileCWithWasmer(m,c);async function n(e){try{return await new Function("m","return import(m)")(e)}catch{return null}}let i=null;if(t==null||t("sdk","Loading Wasmer SDK..."),i=await n("@wasmer/sdk"),!i&&typeof window<"u"){const e=window.__WASMER_SDK_URL;e&&(i=await n(e)),i||(i=await n("https://esm.sh/@wasmer/sdk@1.1.1")||await n("https://cdn.skypack.dev/@wasmer/sdk")||await n("https://esm.run/@wasmer/sdk@1.1.1")||await n("https://unpkg.com/@wasmer/sdk@1.1.1/dist/index.esm.js"))}if(!i)throw new Error("Wasmer SDK not available. Check network access; falling back failed.");const a=i&&(i.Wasmer||((y=i.default)==null?void 0:y.Wasmer)||i.default||i);if(!a)throw new Error("Wasmer SDK loaded but no usable API was found");typeof a.initialize=="function"?(t==null||t("sdk","Initializing Wasmer SDK..."),await a.initialize()):typeof a.init=="function"&&(t==null||t("sdk","Initializing Wasmer SDK..."),await a.init());const u=a.createFs||a.createFS||((W=a.FS)==null?void 0:W.create)||((o=a.fs)==null?void 0:o.create)||(a.FS?()=>new a.FS:void 0);if(typeof u!="function"){const e=Object.keys(a).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing createFs(); available keys: [${e}] â€” try setting window.__WASMER_SDK_URL to a compatible SDK (e.g., 'https://esm.sh/@wasmer/sdk@1.1.1') and re-run /cc.`)}t==null||t("fs","Creating in-memory filesystem...");const w=await u.call(a);await w.writeFile(`/work/${c}`,new TextEncoder().encode(m));const f=typeof window<"u"&&window.__WASMER_PKG?window.__WASMER_PKG:"wasmer/clang:latest",k=c.replace(/\.c$/i,".wasm"),b=["--target=wasm32-wasi","-O3","-Wl,--export-all","-Wl,--no-entry","-o",`/work/${k}`,`/work/${c}`];if(typeof a.runPackage!="function")throw new Error("Wasmer SDK missing runPackage()");t==null||t("pkg",`Fetching package ${f}...`),t==null||t("compile","Compiling to WebAssembly (wasm32-wasi, O3)...");const p=a.runPackage||((h=a.packages)==null?void 0:h.run)||a.run;if(typeof p!="function"){const e=Object.keys(a).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing runPackage(); available keys: [${e}]`)}const s=await p.call(a,f,{args:b,mount:{"/work":w},env:{}});let r="",d="";try{r=new TextDecoder().decode(await((S=s.stdout)==null?void 0:S.bytes()))}catch{}try{d=new TextDecoder().decode(await((_=s.stderr)==null?void 0:_.bytes()))}catch{}t==null||t("result","Reading build outputs...");const l=await w.readFile(`/work/${k}`);if(!l||!(l instanceof Uint8Array))throw new Error(`Wasmer compile failed: output file missing. Stderr: ${d}`);return t==null||t("done","Compilation complete"),{wasm:l,stdout:r,stderr:d}}export{D as compileCWithWasmer};
