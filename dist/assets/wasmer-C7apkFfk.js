async function g(i,a="program.c"){var l,u,f,k,p;if(typeof window<"u"&&window.__mockCompileCWithWasmer)return await window.__mockCompileCWithWasmer(i,a);async function r(h){try{return await new Function("m","return import(m)")(h)}catch{return null}}let t=null;if(t=await r("@wasmer/sdk"),!t&&typeof window<"u"&&(t=await r("https://esm.sh/@wasmer/sdk@1.1.1")||await r("https://cdn.skypack.dev/@wasmer/sdk")||await r("https://esm.run/@wasmer/sdk@1.1.1")),!t)throw new Error("Wasmer SDK not available. Check network access; falling back failed.");const e=t&&(t.Wasmer||((l=t.default)==null?void 0:l.Wasmer)||t.default||t);if(!e)throw new Error("Wasmer SDK loaded but no usable API was found");typeof e.init=="function"&&await e.init();const c=e.createFs||e.createFS||((u=e.FS)==null?void 0:u.create)||((f=e.fs)==null?void 0:f.create);if(typeof c!="function")throw new Error("Wasmer SDK missing createFs(); try a compatible SDK version (e.g., esm.sh/@wasmer/sdk@1.1.1)");const n=await c.call(e);await n.writeFile(`/work/${a}`,new TextEncoder().encode(i));const y="wasmer/clang:latest",w=a.replace(/\.c$/i,".wasm"),W=["--target=wasm32-wasi","-O3","-Wl,--export-all","-Wl,--no-entry","-o",`/work/${w}`,`/work/${a}`];if(typeof e.runPackage!="function")throw new Error("Wasmer SDK missing runPackage()");const d=await e.runPackage(y,{args:W,mount:{"/work":n},env:{}});let m="",s="";try{m=new TextDecoder().decode(await((k=d.stdout)==null?void 0:k.bytes()))}catch{}try{s=new TextDecoder().decode(await((p=d.stderr)==null?void 0:p.bytes()))}catch{}const o=await n.readFile(`/work/${w}`);if(!o||!(o instanceof Uint8Array))throw new Error(`Wasmer compile failed: output file missing. Stderr: ${s}`);return{wasm:o,stdout:m,stderr:s}}export{g as compileCWithWasmer};
