async function h(i,r="program.c"){var m,l,u;if(typeof window<"u"&&window.__mockCompileCWithWasmer)return await window.__mockCompileCWithWasmer(i,r);async function a(f){try{return await new Function("m","return import(m)")(f)}catch{return null}}let t=null;if(t=await a("@wasmer/sdk"),!t&&typeof window<"u"&&(t=await a("https://esm.sh/@wasmer/sdk")||await a("https://cdn.skypack.dev/@wasmer/sdk")||await a("https://esm.run/@wasmer/sdk")),!t)throw new Error("Wasmer SDK not available. Check network access; falling back failed.");const e=t&&(t.Wasmer||((m=t.default)==null?void 0:m.Wasmer)||t.default||t);if(!e)throw new Error("Wasmer SDK loaded but no usable API was found");if(typeof e.init=="function"&&await e.init(),typeof e.createFs!="function")throw new Error("Wasmer SDK missing createFs()");const n=await e.createFs();await n.writeFile(`/work/${r}`,new TextEncoder().encode(i));const k="wasmer/clang:latest",w=r.replace(/\.c$/i,".wasm"),p=["--target=wasm32-wasi","-O3","-Wl,--export-all","-Wl,--no-entry","-o",`/work/${w}`,`/work/${r}`];if(typeof e.runPackage!="function")throw new Error("Wasmer SDK missing runPackage()");const c=await e.runPackage(k,{args:p,mount:{"/work":n},env:{}});let d="",o="";try{d=new TextDecoder().decode(await((l=c.stdout)==null?void 0:l.bytes()))}catch{}try{o=new TextDecoder().decode(await((u=c.stderr)==null?void 0:u.bytes()))}catch{}const s=await n.readFile(`/work/${w}`);if(!s||!(s instanceof Uint8Array))throw new Error(`Wasmer compile failed: output file missing. Stderr: ${o}`);return{wasm:s,stdout:d,stderr:o}}export{h as compileCWithWasmer};
