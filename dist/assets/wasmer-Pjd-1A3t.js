async function E(l,n="program.c",t){var o,y,W,h,S,_;if(typeof window<"u"&&window.__mockCompileCWithWasmer)return await window.__mockCompileCWithWasmer(l,n);async function m(i){try{return await new Function("m","return import(m)")(i)}catch{return null}}let a=null;if(t==null||t("sdk","Loading Wasmer SDK..."),a=await m("@wasmer/sdk"),!a&&typeof window<"u"){const D=[window.__WASMER_SDK_URL,"https://esm.sh/@wasmer/sdk","https://cdn.jsdelivr.net/npm/@wasmer/sdk/+esm","https://unpkg.com/@wasmer/sdk/dist/index.esm.js","https://cdn.skypack.dev/@wasmer/sdk","https://esm.run/@wasmer/sdk"].filter(Boolean);for(const K of D)if(a=await m(K),a)break}if(!a)throw new Error("Wasmer SDK not available. Check network access; falling back failed.");const e=a&&(a.Wasmer||((o=a.default)==null?void 0:o.Wasmer)||a.default||a);if(!e)throw new Error("Wasmer SDK loaded but no usable API was found");typeof e.initialize=="function"?(t==null||t("sdk","Initializing Wasmer SDK..."),await e.initialize()):typeof e.init=="function"&&(t==null||t("sdk","Initializing Wasmer SDK..."),await e.init());const u=e.createFs||e.createFS||((y=e.FS)==null?void 0:y.create)||((W=e.fs)==null?void 0:W.create)||(e.FS?()=>new e.FS:void 0);if(typeof u!="function"){const i=Object.keys(e).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing createFs(); available keys: [${i}] â€” try setting window.__WASMER_SDK_URL to a compatible SDK (e.g., 'https://esm.sh/@wasmer/sdk') and re-run /cc.`)}t==null||t("fs","Creating in-memory filesystem...");const c=await u.call(e);await c.writeFile(`/work/${n}`,new TextEncoder().encode(l));const s=typeof window<"u"&&window.__WASMER_PKG?window.__WASMER_PKG:"wasmer/clang:latest",f=n.replace(/\.c$/i,".wasm"),b=["--target=wasm32-wasi","-O3","-Wl,--export-all","-Wl,--no-entry","-o",`/work/${f}`,`/work/${n}`];if(typeof e.runPackage!="function")throw new Error("Wasmer SDK missing runPackage()");t==null||t("pkg",`Fetching package ${s}...`),t==null||t("compile","Compiling to WebAssembly (wasm32-wasi, O3)...");const r=e.runPackage||((h=e.packages)==null?void 0:h.run)||e.run;if(typeof r!="function"){const i=Object.keys(e).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing runPackage(); available keys: [${i}]`)}const k=await r.call(e,s,{args:b,mount:{"/work":c},env:{}});let p="",w="";try{p=new TextDecoder().decode(await((S=k.stdout)==null?void 0:S.bytes()))}catch{}try{w=new TextDecoder().decode(await((_=k.stderr)==null?void 0:_.bytes()))}catch{}t==null||t("result","Reading build outputs...");const d=await c.readFile(`/work/${f}`);if(!d||!(d instanceof Uint8Array))throw new Error(`Wasmer compile failed: output file missing. Stderr: ${w}`);return t==null||t("done","Compilation complete"),{wasm:d,stdout:p,stderr:w}}export{E as compileCWithWasmer};
