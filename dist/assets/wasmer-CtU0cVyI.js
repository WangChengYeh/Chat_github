async function b(l,w="program.c",t){var s,y,W,h,o;if(typeof window<"u"&&window.__mockCompileCWithWasmer)return await window.__mockCompileCWithWasmer(l,w);async function c(i){try{return await new Function("m","return import(m)")(i)}catch{return null}}let a=null;if(t==null||t("sdk","Loading Wasmer SDK..."),a=await c("@wasmer/sdk"),!a&&typeof window<"u"){const i=window.__WASMER_SDK_URL;i&&(a=await c(i)),a||(a=await c("https://esm.sh/@wasmer/sdk@1.1.1")||await c("https://cdn.skypack.dev/@wasmer/sdk")||await c("https://esm.run/@wasmer/sdk@1.1.1"))}if(!a)throw new Error("Wasmer SDK not available. Check network access; falling back failed.");const e=a&&(a.Wasmer||((s=a.default)==null?void 0:s.Wasmer)||a.default||a);if(!e)throw new Error("Wasmer SDK loaded but no usable API was found");typeof e.init=="function"&&(t==null||t("sdk","Initializing Wasmer SDK..."),await e.init());const u=e.createFs||e.createFS||((y=e.FS)==null?void 0:y.create)||((W=e.fs)==null?void 0:W.create);if(typeof u!="function"){const i=Object.keys(e).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing createFs(); available keys: [${i}] â€” try setting window.__WASMER_SDK_URL to a compatible SDK (e.g., 'https://esm.sh/@wasmer/sdk@1.1.1') and re-run /cc.`)}t==null||t("fs","Creating in-memory filesystem...");const n=await u.call(e);await n.writeFile(`/work/${w}`,new TextEncoder().encode(l));const r="wasmer/clang:latest",f=w.replace(/\.c$/i,".wasm"),S=["--target=wasm32-wasi","-O3","-Wl,--export-all","-Wl,--no-entry","-o",`/work/${f}`,`/work/${w}`];if(typeof e.runPackage!="function")throw new Error("Wasmer SDK missing runPackage()");t==null||t("pkg",`Fetching package ${r}...`),t==null||t("compile","Compiling to WebAssembly (wasm32-wasi, O3)...");const p=await e.runPackage(r,{args:S,mount:{"/work":n},env:{}});let k="",d="";try{k=new TextDecoder().decode(await((h=p.stdout)==null?void 0:h.bytes()))}catch{}try{d=new TextDecoder().decode(await((o=p.stderr)==null?void 0:o.bytes()))}catch{}t==null||t("result","Reading build outputs...");const m=await n.readFile(`/work/${f}`);if(!m||!(m instanceof Uint8Array))throw new Error(`Wasmer compile failed: output file missing. Stderr: ${d}`);return t==null||t("done","Compilation complete"),{wasm:m,stdout:k,stderr:d}}export{b as compileCWithWasmer};
