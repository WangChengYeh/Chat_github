async function _(m,n="program.c",t){var y,W,h,o,S,b;if(typeof window<"u"&&window.__mockCompileCWithWasmer)return await window.__mockCompileCWithWasmer(m,n);async function c(i){try{return await new Function("m","return import(m)")(i)}catch{return null}}let e=null;if(t==null||t("sdk","Loading Wasmer SDK..."),e=await c("@wasmer/sdk"),!e&&typeof window<"u"){const i=window.__WASMER_SDK_URL;i&&(e=await c(i)),e||(e=await c("https://esm.sh/@wasmer/sdk@1.1.1")||await c("https://cdn.skypack.dev/@wasmer/sdk")||await c("https://esm.run/@wasmer/sdk@1.1.1")||await c("https://unpkg.com/@wasmer/sdk@1.1.1/dist/index.esm.js"))}if(!e)throw new Error("Wasmer SDK not available. Check network access; falling back failed.");const a=e&&(e.Wasmer||((y=e.default)==null?void 0:y.Wasmer)||e.default||e);if(!a)throw new Error("Wasmer SDK loaded but no usable API was found");typeof a.initialize=="function"?(t==null||t("sdk","Initializing Wasmer SDK..."),await a.initialize()):typeof a.init=="function"&&(t==null||t("sdk","Initializing Wasmer SDK..."),await a.init());const u=a.createFs||a.createFS||((W=a.FS)==null?void 0:W.create)||((h=a.fs)==null?void 0:h.create)||(a.FS?()=>new a.FS:void 0);if(typeof u!="function"){const i=Object.keys(a).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing createFs(); available keys: [${i}] â€” try setting window.__WASMER_SDK_URL to a compatible SDK (e.g., 'https://esm.sh/@wasmer/sdk@1.1.1') and re-run /cc.`)}t==null||t("fs","Creating in-memory filesystem...");const w=await u.call(a);await w.writeFile(`/work/${n}`,new TextEncoder().encode(m));const k="wasmer/clang:latest",f=n.replace(/\.c$/i,".wasm"),D=["--target=wasm32-wasi","-O3","-Wl,--export-all","-Wl,--no-entry","-o",`/work/${f}`,`/work/${n}`];if(typeof a.runPackage!="function")throw new Error("Wasmer SDK missing runPackage()");t==null||t("pkg",`Fetching package ${k}...`),t==null||t("compile","Compiling to WebAssembly (wasm32-wasi, O3)...");const p=a.runPackage||((o=a.packages)==null?void 0:o.run)||a.run;if(typeof p!="function"){const i=Object.keys(a).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing runPackage(); available keys: [${i}]`)}const s=await p.call(a,k,{args:D,mount:{"/work":w},env:{}});let r="",d="";try{r=new TextDecoder().decode(await((S=s.stdout)==null?void 0:S.bytes()))}catch{}try{d=new TextDecoder().decode(await((b=s.stderr)==null?void 0:b.bytes()))}catch{}t==null||t("result","Reading build outputs...");const l=await w.readFile(`/work/${f}`);if(!l||!(l instanceof Uint8Array))throw new Error(`Wasmer compile failed: output file missing. Stderr: ${d}`);return t==null||t("done","Compilation complete"),{wasm:l,stdout:r,stderr:d}}export{_ as compileCWithWasmer};
