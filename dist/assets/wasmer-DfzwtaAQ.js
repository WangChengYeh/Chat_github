async function C(l,n="program.c",t){var p,s,y,W,_,S;if(typeof window<"u"&&window.__mockCompileCWithWasmer)return await window.__mockCompileCWithWasmer(l,n);async function h(i){try{return await new Function("m","return import(m)")(i)}catch{return null}}let a=null;if(t==null||t("sdk","Loading Wasmer SDK (local path only)..."),typeof window<"u"){const D=[window.__WASMER_SDK_URL,"/Chat_github/vendor/wasmer-sdk/index.esm.js","/vendor/wasmer-sdk/index.esm.js","vendor/wasmer-sdk/index.esm.js"].filter(Boolean);for(const K of D)if(a=await h(K),a)break}if(!a)throw new Error("Wasmer SDK not available locally. Place SDK at /Chat_github/vendor/wasmer-sdk/index.esm.js (or set window.__WASMER_SDK_URL to a local path).");const e=a&&(a.Wasmer||((p=a.default)==null?void 0:p.Wasmer)||a.default||a);if(!e)throw new Error("Wasmer SDK loaded but no usable API was found");typeof e.initialize=="function"?(t==null||t("sdk","Initializing Wasmer SDK..."),await e.initialize()):typeof e.init=="function"&&(t==null||t("sdk","Initializing Wasmer SDK..."),await e.init());const m=e.createFs||e.createFS||((s=e.FS)==null?void 0:s.create)||((y=e.fs)==null?void 0:y.create)||(e.FS?()=>new e.FS:void 0);if(typeof m!="function"){const i=Object.keys(e).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing createFs(); available keys: [${i}] â€” try setting window.__WASMER_SDK_URL to a compatible SDK (e.g., 'https://esm.sh/@wasmer/sdk') and re-run /cc.`)}t==null||t("fs","Creating in-memory filesystem...");const c=await m.call(e);await c.writeFile(`/work/${n}`,new TextEncoder().encode(l));const u=typeof window<"u"&&window.__WASMER_PKG?window.__WASMER_PKG:"wasmer/clang:latest",r=n.replace(/\.c$/i,".wasm"),b=["--target=wasm32-wasi","-O3","-Wl,--export-all","-Wl,--no-entry","-o",`/work/${r}`,`/work/${n}`];if(typeof e.runPackage!="function")throw new Error("Wasmer SDK missing runPackage()");t==null||t("pkg",`Fetching package ${u}...`),t==null||t("compile","Compiling to WebAssembly (wasm32-wasi, O3)...");const o=e.runPackage||((W=e.packages)==null?void 0:W.run)||e.run;if(typeof o!="function"){const i=Object.keys(e).slice(0,20).join(", ");throw new Error(`Wasmer SDK missing runPackage(); available keys: [${i}]`)}const f=await o.call(e,u,{args:b,mount:{"/work":c},env:{}});let k="",w="";try{k=new TextDecoder().decode(await((_=f.stdout)==null?void 0:_.bytes()))}catch{}try{w=new TextDecoder().decode(await((S=f.stderr)==null?void 0:S.bytes()))}catch{}t==null||t("result","Reading build outputs...");const d=await c.readFile(`/work/${r}`);if(!d||!(d instanceof Uint8Array))throw new Error(`Wasmer compile failed: output file missing. Stderr: ${w}`);return t==null||t("done","Compilation complete"),{wasm:d,stdout:k,stderr:w}}export{C as compileCWithWasmer};
