#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load configurations
const configPath = path.join(__dirname, '..', '.config');
const snippetsConfigPath = path.join(__dirname, '..', 'snippets.config.json');

function loadConfig() {
  try {
    const configContent = fs.readFileSync(configPath, 'utf-8');
    // Parse the config file (it's not valid JSON, so we need to evaluate it)
    const config = eval(`(${configContent})`);
    return config;
  } catch (error) {
    console.error('Error loading .config file:', error.message);
    console.log('Make sure .config file exists with GitHub token and repository info.');
    process.exit(1);
  }
}

function loadSnippetsConfig() {
  try {
    const snippetsContent = fs.readFileSync(snippetsConfigPath, 'utf-8');
    return JSON.parse(snippetsContent);
  } catch (error) {
    console.error('Error loading snippets.config.json:', error.message);
    process.exit(1);
  }
}

async function uploadSnippet(config, snippet, uploadConfig) {
  const { githubToken, owner, repo, branch } = config;
  const targetPath = `${uploadConfig.targetRepo.path}${snippet.id}.${getFileExtension(snippet.language)}`;
  
  // Create file content with metadata
  const fileContent = `// Snippet: ${snippet.name}
// Description: ${snippet.description}
// Language: ${snippet.language}
// Generated by Chat GitHub PWA

${snippet.content}`;

  const encodedContent = Buffer.from(fileContent).toString('base64');
  
  const url = `https://api.github.com/repos/${owner}/${repo}/contents/${targetPath}`;
  
  try {
    // Check if file exists first
    let sha = null;
    try {
      const checkResponse = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${githubToken}`,
          'Accept': 'application/vnd.github.v3+json',
        },
      });
      
      if (checkResponse.ok) {
        const existingFile = await checkResponse.json();
        sha = existingFile.sha;
        console.log(`📝 Updating existing snippet: ${snippet.name}`);
      }
    } catch (error) {
      console.log(`📄 Creating new snippet: ${snippet.name}`);
    }

    // Upload or update the file
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${githubToken}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: `${uploadConfig.commitMessage}: ${snippet.name}`,
        content: encodedContent,
        branch: branch,
        ...(sha && { sha }),
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`GitHub API error: ${response.status} - ${errorData.message}`);
    }

    const result = await response.json();
    console.log(`✅ Successfully uploaded: ${snippet.name} -> ${targetPath}`);
    return result;
    
  } catch (error) {
    console.error(`❌ Failed to upload ${snippet.name}:`, error.message);
    throw error;
  }
}

function getFileExtension(language) {
  const extensions = {
    'ts': 'ts',
    'tsx': 'tsx',
    'js': 'js',
    'jsx': 'jsx',
    'json': 'json',
    'md': 'md',
    'css': 'css',
    'html': 'html',
    'python': 'py',
    'py': 'py',
  };
  return extensions[language] || 'txt';
}

async function uploadAllSnippets() {
  console.log('🚀 Starting snippet upload process...\n');
  
  const config = loadConfig();
  const snippetsConfig = loadSnippetsConfig();
  
  console.log(`📊 Found ${snippetsConfig.snippets.length} snippets to upload`);
  console.log(`🎯 Target: ${config.owner}/${config.repo}/${snippetsConfig.uploadConfig.targetRepo.path}\n`);

  let successful = 0;
  let failed = 0;

  for (const snippet of snippetsConfig.snippets) {
    try {
      await uploadSnippet(config, snippet, snippetsConfig.uploadConfig);
      successful++;
    } catch (error) {
      failed++;
    }
    
    // Small delay between uploads to avoid rate limiting
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  console.log('\n📈 Upload Summary:');
  console.log(`✅ Successful: ${successful}`);
  console.log(`❌ Failed: ${failed}`);
  console.log(`📁 Total: ${snippetsConfig.snippets.length}`);
  
  if (failed > 0) {
    process.exit(1);
  } else {
    console.log('\n🎉 All snippets uploaded successfully!');
  }
}

// Handle specific snippet upload
async function uploadSpecificSnippet(snippetId) {
  console.log(`🎯 Uploading specific snippet: ${snippetId}\n`);
  
  const config = loadConfig();
  const snippetsConfig = loadSnippetsConfig();
  
  const snippet = snippetsConfig.snippets.find(s => s.id === snippetId);
  if (!snippet) {
    console.error(`❌ Snippet with ID '${snippetId}' not found`);
    console.log('Available snippets:');
    snippetsConfig.snippets.forEach(s => {
      console.log(`  - ${s.id}: ${s.name}`);
    });
    process.exit(1);
  }

  try {
    await uploadSnippet(config, snippet, snippetsConfig.uploadConfig);
    console.log('\n🎉 Snippet uploaded successfully!');
  } catch (error) {
    process.exit(1);
  }
}

// Main execution
const args = process.argv.slice(2);

if (args.length === 0) {
  uploadAllSnippets();
} else if (args.length === 1) {
  uploadSpecificSnippet(args[0]);
} else {
  console.log('Usage:');
  console.log('  npm run upload-snippets           # Upload all snippets');
  console.log('  npm run upload-snippets <id>      # Upload specific snippet');
  process.exit(1);
}